#!/usr/bin/env zsh
## Crafted (c) 2025 by Zoatworks - We are stronger together
## Prepared : Roberto Nogueira
## File     : today
## Project  : project-today-manager
## Reference: bash
## Depends  : tag
## Purpose  : Help to manage gtd process flow implemented in the file system.

setopt SH_WORD_SPLIT KSH_ARRAYS
alias readlink='realpath'

# setters
_set_project(){
  local project=$1
  if test -z "$project"; then
    if ! test -L "$(pwd)"; then 
      echo $(basename $(realpath "$(pwd)"))
    else
      echo $(basename $(realpath "$(pwd)"))
    fi  
  else 
    echo $1
  fi
}

_projects(){ pushd $TODAY_PROJECTS; }
_projects.methods(){ echo "help|list|new"; }
_projects.help(){ printf "\e[1;37m%s\e[0m \e[1;36m%s\e[0m\n" "projects" "[$(_projects.methods)]"; }
_projects.list(){ 
  if test -z $1; then
    ls -l $TODAY_PROJECTS | awk '{print $9}'; 
  else
    ls -l $TODAY_PROJECTS | awk '{print $9}' | grep "$1"; 
  fi  
}
_projects.new(){
  local project=$1
  local project_type=$2

  test -z "$2" && project_type=project

  # validate project_type against defined templates
  if ! [[ " ${TODAY_PROJECT_TYPES[@]} " == *" $project_type "* ]]; then
    printf " \e[0;31m%s \e[0m%s\n" "=>" "Invalid project type '$project_type'. Available types: ${TODAY_PROJECT_TYPES[*]}"
    return 1
  fi

  if test -d $TODAY_PROJECT_HOME/project-types/$project_type; then
    cp -r $TODAY_PROJECT_HOME/project-types/$project_type $TODAY_PROJECTS/$project
    if ! test $? -eq 0; then
      printf " \e[0;31m%s \e[0m%s\n" "=>" "Error creating project $project"
    fi
  fi
  # only change into the new project directory if it was created
  if test -d "$TODAY_PROJECTS/$project"; then
    pushd "$TODAY_PROJECTS/$project"
  else
    return 1
  fi
}

_scheduled(){ pushd $TODAY_SCHEDULED; }
_scheduled.methods(){ echo "archive|end|help|init|jump|list|today"; }
_scheduled.archive(){
  local position
  local date
  local project 
  local projects
  position=0
  saveIFS="$IFS"
  IFS=$'\n'
  projects=("${(@f)$(_scheduled.list)}")
  for p in ${projects[@]}; do
    position=$(($position + 1))
    date=$(echo $p | awk '{print $2}')
    project=$(echo $p | awk '{print $3}')
    mv "$TODAY_SCHEDULED/$p" "$TODAY_SCHEDULED/$position $date $project" 
  done   
  IFS="$saveIFS"
}
_scheduled.end(){
  local project=$(_set_project $1)
  _scheduled.list | grep $project &> /dev/null
  if test $? -eq 0; then
    today.init $project
    project_name=$(_scheduled.list | grep $project | head -1)
    rm -f "$TODAY_SCHEDULED/$project_name"
  fi
}
_scheduled.help(){ printf "\e[1;37m%s\e[0m \e[1;36m%s\e[0m\n" "scheduled" "[$(_scheduled.methods)]"; }
_scheduled.init(){
  local project=$(_set_project $1)
  local position=$(($(tdsl | wc -l) + 1))
  ! test -z "$1" && project=$1
  _scheduled.list | grep $project &> /dev/null
  if test $? -ne 0 && test -d $TODAY_PROJECTS/$project; then
    if test -z $2; then
      ln -sf $TODAY_PROJECTS/$project "$TODAY_SCHEDULED/$position $(date +'%Y-%m-%d') $project"
    else
      saveIFS="$IFS"
      # parse ISO date on macOS
      parsed_date=$(date -j -f "%Y-%m-%d" "$2" +"%Y-%m-%d")
      IFS="-"
      read Y m d <<< "$parsed_date"
      IFS="$saveIFS"
      ln -sf $TODAY_PROJECTS/$project "$TODAY_SCHEDULED/$position $Y-$m-$d $project"
    fi  
  fi
}
_scheduled.jump(){
  local project=$(_set_project $1)
  re='^[0-9]+$'
  if [[ $project =~ $re ]]; then
    project=$(_scheduled.list | grep ^$project | head -1 | awk '{print $3}')
  fi
  if test -d $TODAY_PROJECTS/$project; then
    pushd $TODAY_PROJECTS/$project
  fi
}
_scheduled.list(){ ls -p $TODAY_SCHEDULED | grep -v /; }
_scheduled.today(){
  local date_today=$(date +%s)
  local date_scheduled
  saveIFS="$IFS"
  IFS=$'\n'
  for p in "${(@f)$(_scheduled.list)}"; do
      project=$(echo $p | awk '{print $3}')
      date_project=$(echo $p | awk '{print $2}')
    # only parse valid ISO dates, skip otherwise
    if [[ "$date_project" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
      date_scheduled=$(date -j -f "%Y-%m-%d" "${date_project}" "+%s" 2>/dev/null) || date_scheduled=0
    else
      continue
    fi
      if [ $date_today -ge $date_scheduled ]; then
        _scheduled.end $project
      fi
    done   
  IFS="$saveIFS"
}


# today
today(){
  local today_methods="$(today.methods)"
  local today_forward_methods="$(today.forward_methods)"
  case $1 in
    --version|-v|v|version)
      today.version
      ;;
    --help|-h|h|help)
      printf "\e[1;37m%s \e[0m\n" "Crafted (c) 2025 by Zoatworks - We are stronger together"
      today.version
      printf "\e[1;37m%s \e[0m%s\n" "today" "$(today.help)" 
      printf "\e[1;37m%s \e[0m%s\n" "     " "[$(_projects.help)]" 
      printf "\e[1;37m%s \e[0m%s\n" "     " "[$(_scheduled.help)]" 
      printf "\n" 
      printf "\e[1;37m%s \e[0m\n" "aliases"
      alias | grep "^alias td" | sed 's/^/  /g'
      printf "\n" 
      printf "\e[0;32m%s \e[4m%s\e[0m\e[0m\n" "homepage" "http://github.com/enogrob/project-today-manager"
      printf "\n"
      ;;
  archive|end|help|init|jump|list|setup|version)
    today.$1 ${@:2}
    ;;
  projects|scheduled)
    _${1} ${@:2}
    ;;
   *)
     if [ -z "$1" ]; then
       pushd $TODAY
     else   
       printf " \e[0;31m%s \e[0m%s\n" "=>" "invalid parameter ${1}"
     fi  
     ;;
 esac
}
today.methods(){ echo "archive|end|help|init|jump|list|setup|version"; }
today.archive(){
  local position
  local date
  local project 
  local projects
  position=0
  saveIFS="$IFS"
  IFS=$'\n'
  projects=("${(@f)$(today.list)}")
  for p in ${projects[@]}; do
    position=$(($position + 1))
    date=$(echo $p | awk '{print $2}')
    project=$(echo $p | awk '{print $3}')
    # only rename if the source and target differ
    if [ "$TODAY/$p" != "$TODAY/$position $date $project" ]; then
      mv "$TODAY/$p" "$TODAY/$position $date $project"
    fi
  done   
  IFS="$saveIFS"
}
today.print(){ 
  local position
  local date
  local project 
  local tags
  _scheduled.today
  saveIFS="$IFS"
  IFS=$'\n'
  for p in "${(@f)$(today.list)}"; do
    position=$(echo $p | awk '{print $1}')
    date=$(echo $p | awk '{print $2}')
    project=$(echo $p | awk '{print $3}')
    tags=$(echo $(tag.list $project))
    ! test -z $tags && tags=$(echo $tags | sed 's/,/ #/g')
    printf "\e[0;37m%s \e[0;37m%s \e[0;32m%s " $position $date $project
    if ! test -z $tags; then
      printf "\e[1;36m#%s \e[0m\n" $tags
    else  
      printf "\n" 
    fi  
  done   
  for p in "${(@f)$(_scheduled.list)}"; do
    position=$(echo $p | awk '{print $1}')
    date=$(echo $p | awk '{print $2}')
    project=$(echo $p | awk '{print $3}')
    tags=$(echo $(tag.list $project))
    ! test -z $tags && tags=$(echo $tags | sed 's/,/ #/g')
    printf "\e[0;37m%s \e[0;33m%s \e[0;32m%s " $position $date $project
    if ! test -z $tags; then
      printf "\e[1;36m#%s \e[0m\n" $tags
    else  
      printf "\n" 
    fi  
  done   
  IFS="$saveIFS"
}
today.forward_methods(){ echo "projects|scheduled"; }
today.end(){
  local project=$(_set_project $1)
  today.list | grep $project &> /dev/null
  if test $? -eq 0; then
    project_name=$(today.list | grep $project | head -1)
    rm -f "$TODAY/$project_name"
  fi
}
today.end.all(){ find $TODAY -type l -delete;}
today.help(){ printf "\e[1;37m%s\e[0m\e[1;36m%s\e[0m\n" "" "[$(today.methods)]"; }
today.init(){
  local project=$(_set_project $1)
  local position=$(($(tdyl | wc -l) + 1))
  ! test -z "$1" && project=$1
  today.list | grep $project &> /dev/null
  if test $? -ne 0 && test -d $TODAY_PROJECTS/$project; then
    ln -sf $TODAY_PROJECTS/$project "$TODAY/$position $(date +%Y-%m-%d) $project"
  fi
}
today.jump(){
  local project=$(_set_project $1)
  re='^[0-9]+$'
  if [[ $project =~ $re ]]; then
    project=$(today.list | grep ^$project | head -1 | awk '{print $3}')
  fi
  if test -d $TODAY_PROJECTS/$project; then
    pushd $TODAY_PROJECTS/$project
  fi
}
today.list(){ ls -p $TODAY | grep -v /; }
today.setup(){
  export TODAY_UPDATE_MESSAGE="'today.archive' corrected and 'tdoday.end.all' designed"
  export TODAY_VERSION=v1.0.2
  export TODAY_VERSION_DATE=2025.06.24
  
  export TODAY=$HOME/Today
  export TODAY_PROJECTS=$HOME/Projects
  export TODAY_SCHEDULED=$HOME/Scheduled
  export TODAY_PROJECT_HOME=$TODAY_PROJECTS/project-today-manager
  export TODAY_PROJECT_TYPES=("${(@f)$(ls -1 "$TODAY_PROJECT_HOME/project-types")}")
  
  alias src='test -d src && cd src'
  alias tdya='today.archive'
  alias tdy='today'
  alias tdyl='today.list'
  alias tdyi='today.init'
  alias tdyj='today.jump'
  alias tdye='today.end'
  alias tdyea='today.end.all'
  
  alias tdp='_projects'
  alias tdpl='_projects.list'
  alias tdpn='_projects.new'
  
  alias tds='_scheduled'
  alias tdsa='_scheduled.archive'
  alias tdsl='_scheduled.list'
  alias tdsi='_scheduled.init'
  alias tdsj='_scheduled.jump'
  alias tdse='_scheduled.end'
  alias tdst='_scheduled.today'

  ! test -d $TODAY && mkdir -p $TODAY
  ! test -d $TODAY_PROJECTS && mkdir -p $TODAY_PROJECTS
  ! test -d $TODAY_SCHEDULED && mkdir -p $TODAY_SCHEDULED

# callbacks
  _scheduled.today 
}
today.version(){
  printf "\e[0;37m%s \e[0m%s\n" "Today" "$TODAY_VERSION"
  printf "\n"
}

today.setup